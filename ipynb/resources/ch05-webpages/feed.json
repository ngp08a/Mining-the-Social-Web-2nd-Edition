[
 {
  "content": "Download a free copy of Designing for the Internet of Things , a curated collection of chapters from the O\u2019Reilly Design library. This post is an excerpt from Discussing Design , by Adam Connor and Aaron Irizarry , one of the books included in the curated collection. \n There are two sides, or roles, in any critique: \n Recipient: The individual(s) receiving the critique (i.e. the creator or presenter of whatever is being analyzed) who will take the perspectives and information raised during the critique, process it, and act upon it in some way. \n Giver: The individual(s) giving the critique, who are being asked to think critically about the creation and provide their thoughts and perspectives. \n Within both of these roles, there is the discrete aspect of intention: why are we asking for/receiving/giving feedback. Intent is the initiator of the conversation and is often what separates successful critiques and feedback discussions from problematic ones. \n For the best discussions, the intent of each participant, regardless of whether they are receiving or giving critique, needs to be appropriate. If we aren\u2019t careful, critique with the wrong, or inappropriate, intent on either side can lead to problems not only in our designs, but also in our ability to work with our teammates. \n Receiving critique with the appropriate intent is about wanting to understand whether the decisions you\u2019ve made are working toward your product\u2019s (and its design\u2019s) established objectives. \n [caption id=\"attachment_74387\" align=\"alignright\" width=\"237\"]  Download the free ebook. [/caption]Giving critique with the appropriate intent is about wanting to help the creator understand the impacts of their choices with regard to their effectiveness toward reaching the design\u2019s objectives. \n Both acts are done with the intention of using the information and perspectives raised during the critique to iterate upon and strengthen the design. This is an important aspect of the discussion. Many of us have experienced meetings where we\u2019re asked to give our thoughts on something like a design, or a process, or maybe even a project (ex: a postmortem), and over time, if these discussions repeatedly fail to produce action and changes, our desire to participate and provide our perspectives wanes. \n Part of what makes for strong critiques is the desire to participate, to help. It isn\u2019t the case that everything said in a critique will produce a discrete modification to the design, but overall, participants should feel that the discussion, which they actively contributed to, played a role in improving the design, not just changing it, but strengthening its ability to produce the desired objectives. \n Prior to beginning a critique, whether you\u2019re the giver or receiver, it\u2019s best to make sure that you\u2019re going in with the right intent. \n Giving critique \n As mentioned, giving critique with the right intent is about wanting to contribute to the improvement of the creation by helping the creator understand the relative success their design choices have in working toward objectives. When we start our feedback discussions from this mindset, we think critically not just about what we\u2019re saying, but why we\u2019re saying it, which is important to productive dialogues. \n To better understand what giving a good critique looks like, let\u2019s first look at some characteristics of bad critique. For more tips on handling and working with unhelpful feedback and unwanted critique, see Chapter 5: Critiquing with Difficult People and Challenging Situations. \n Characteristics of Bad Critique \n Selfish \n The wrong intentions for giving critique are often selfish. They\u2019re focused on personal goals and desires for attention at the expense of the team or other individuals, specifically the creator of whatever is being discussed. \n Selfish critique comes from the motivation of the giver to not only be heard and attract attention, but also to be recognized as smarter or superior, or further personal goals. \n The most recognizable examples of this can be seen on social networks like Twitter or Facebook whenever there is a change to a popular app, device, etc. A new feature is added or something is changed, and people immediately begin slamming decisions, calling them ridiculous and stupid, and stating how things \u201cshould have been designed.\u201d \n But in most of these situations, the commenters have only a cursory understanding of what the designer or team was working toward and the constraints they were working within. How is this helpful? \n When we do this (and Aaron and I are guilty of it, too, as are most people) are we really trying to help someone improve their design? Or are we more interested in showing others in our community or organization how smart we are on a certain topic? \n This type of feedback happens on project teams as well. Maybe you\u2019ve encountered it at work, are thinking of a colleague who\u2019s done it to you, or maybe you\u2019ve done it yourself. \n Sometimes, this kind of feedback comes from having our own ideas of what we think the design should be but not having had a chance to share it with the team. So, we set about to use feedback as a way to diminish the design being presented and (in some cases) propose our own alternative. While Aaron and I are firm believers that a great idea can come from anywhere, and team members in any role should be given an opportunity to share their ideas, this path to doing so is detrimental to a critique. \n As we\u2019ll discuss more in Chapter 4, critique is not the place for exploring new ideas. Its purpose is to analyze the design as it has been created so far. Shifting a group from an analytical mindset to an explorative one is best done with deliberate facilitation. \n Untimely \n Despite what we may think, and what some people may even say, people aren\u2019t always looking to hear feedback on their work. Unless someone has specifically told you they\u2019d like your feedback, it\u2019s unwise to think your conversation is a great opportunity to share your analysis with them. If someone is telling people about their creation, it may just be to get the word out or simply that they\u2019re excited about what they\u2019re working on. \n In order for the receiver to really listen, process, and make use of critique, they need to be in the proper mindset. Whether at a team member\u2019s desk, in a meeting, or on social channels, when critique is uninvited, it can lead to defensiveness, communication breakdowns, and often paints the person giving it as a \u201cknow it all.\u201d \n Incomplete \n For critique to be useful, the creator(s) need to understand not just the potential outcome or reaction to an element of their creation, but the why behind it. We often see feedback in the form of things like: \n \u201cI think the button is better than the link. Nobody is going to click on that.\u201d \n Or, even worse: \n \u201cThis is terrible...\u201d \n This type of feedback typically comes from the reactive form of feedback we discussed in Chapter 1. It lacks the extended critical thinking that allows those working on the design to understand what they might need to change in their next iteration. In order for these critiques to become valuable, they need to be followed by an explanation as to why the giver is having that reaction or foresees a certain outcome. For example: \n \u201cNobody is going to click on that because the current page design leads the eye down the left side of the screen, away from the call-to-action.\u201d \n Good critique is actionable. When the \"why\u201d behind the feedback is included, the comment can now be fully understood, and the creator can take action. That is to say, the creator has enough of an understanding of what is/isn\u2019t working and why that they can explore alternatives or make other adjustments. \n Note, though, that this is different from prescription or direction. It is not the case that critique should tell the creator how to act on something or specifically what changes they should make (i.e. the directive form of feedback). Good critique tries to avoid problem solving, as it can detract and distract from the analytical focus of the discussion. For more on this, check out Chapter 4. \n Preferential \n Another common characteristic of bad critique is feedback that is justified by the giver from purely preferential thinking. We\u2019ve all heard horror stories about this kind of feedback: designs are torn apart, not because a particular aspect isn\u2019t working toward its objective, but rather it doesn\u2019t match exactly what the feedback giver \u201clikes.\u201d For example: a website design gets canned because the color scheme reminds a stakeholder of a Christmas sweater his ex-wife had given him. \n Though it might seem ridiculous, this kind of feedback is common, though maybe not always so extreme. It usually feels like it\u2019s coming out of nowhere and has no relevance to the work we\u2019re doing, but sometimes, it really just boils down to a personal preference. \n This kind of feedback is not only unhelpful, as it does nothing to analyze a creation with regard to objectives, it can be distracting and counterproductive. This is especially the case when it comes from team members or stakeholders who are in a position of approval. In these situations, the team begins, consciously or subconsciously, to prioritize that individual\u2019s tastes alongside or above project and user goals, even if they conflict. \n Best practices for giving critique \n Where critique with the wrong intent (done knowingly or not) is harmful, damaging teams, processes, and \u2014 most importantly \u2014 the product, useful, productive critique has the ability to strengthen relationships and collaboration, improve productivity, and lead to better designs. In order give the best critique possible, think about the following best practices when giving feedback. \n Lead with questions. Get more information to base your feedback on and show an interest in their thinking. \n Chances are, before being asked for your feedback, the creator(s) will give a brief explanation of what they\u2019ve put together so far and how it would work. This gives you some context and understanding of the objectives they have and the elements of the design they\u2019ve put in place to achieve them. But chances are, they haven\u2019t explained everything. Actually, as we\u2019ll talk about shortly, hopefully they haven\u2019t explained everything. \n This is your chance to open up the dialogue. By asking questions, you give yourself more information on which to base your analysis and give stronger, actionable feedback. And if done in a non-interrogative way, it shows the creator that you\u2019re genuinely interested in not only their work, but their thinking behind it, which can make discussing it and listening to feedback a bit easier for them. \n Examples of questions you might ask: \n \n Can you tell me more about what your objectives were for [specific aspect or element of the creation]? \n What other options did you consider for [aspect/element]? \n Why did you choose this approach for [aspect/element]? \n Were there any influencers or constraints that affected your choices? \n \n Remember though, the dual purpose of asking these questions of the creator: \n \n to get you more information and ... \n to get them more comfortable talking about their thought process and decisions. \n \n To that extent, how you ask these questions can have a huge impact. Asking every question beginning with \u201cWhy...\u201d can feel abrasive or like an attack. Use lighter, more inviting phrasing such as, \u201ctell me more about...\u201d \n Use a filter. Hold on to your initial reactions, investigate them and discuss them in the proper context as appropriate. \n You\u2019re going to have reactions. As the work is being presented to you, there will be things that make you think \u201chuh?\u201d or \u201cthat\u2019s cool\u201d or \u201cI don\u2019t get it\u201d or maybe something worse. Hold onto those reactions and remember that reactions don\u2019t typically make for useful feedback. Ask yourself why you\u2019re reacting in that way. Ask the presenters additional questions if necessary. \n Once you understand your reaction and what caused it, think about whether it makes sense to discuss. Does it relate to the objectives of the product, the audience for it, or any particular best practices that should be followed? Or is it more about your personal preference or wishes for how you\u2019d like to have seen it designed? \n If your feedback is related to the product\u2019s objectives or best practices, and not about your personal reaction or preferences, then it definitely has a place in the conversation. Sometimes though, you may find yourself with feedback that, while not a best practice or preference, is also not specific to a best practice or a stated objective. Maybe it\u2019s something new that you think should be considered. What should you do in those situations? \n In these cases, it may still be useful to bring your feedback into the conversation. These kinds of thoughts can be useful in determining additional objectives or constraints for the project that need to be exposed. It may be something you can discuss quickly and then continue on with the critique, or it may prove to be something sizeable that needs a separate, dedicated discussion so that the critique isn\u2019t derailed. \n Don\u2019t assume. Find out the thinking or constraints behind choices. \n \u201cTo assume makes an ass out of you and me.\u201d Most of us have probably heard that line a few times in our lives. It\u2019s one of my father\u2019s favorites, and it\u2019s stuck with me. \n Assumptions can be one of the worst things to happen in a discussion that is meant to be productive. When we make assumptions, we begin to form our thoughts, questions, and statements around them, without ever knowing if they\u2019re true or not. And before you know it, the participants of the discussion go on their way to do their work based on very different ideas and producing work that doesn\u2019t align with each other or reality. \n When you make assumptions in a critique about what an objective or constraint might have been, or maybe that there were no constraints and the designer could have done anything, you begin to offer feedback that can be less useful because it isn\u2019t based on the real situation. \n To get around this is simple. The quickest way to eliminate assumptions is to ask about them. \n Yup. More questions. Put your assumption out there and ask if it\u2019s accurate. If it is, continue on with your insights. If it isn\u2019t, you may find that you need to adjust your thinking a little. \n Don\u2019t invite yourself. Get in touch and ask to talk about the design. \n Recall in the previous section that we talked about untimely feedback as one of the types of unhelpful critique. If the recipient of the critique isn\u2019t in a mindset where they want and are ready to listen to the feedback and use it, chances are it\u2019ll be ignored or potentially cause a rift in your working relationship with them. \n If you have thoughts about someone\u2019s creation and they haven\u2019t explicitly asked for your feedback or critique, get in touch with them first and let them know. Tell them that, when they\u2019re at a point when your thoughts might be helpful to them, you\u2019d be happy to share them. Give them the opportunity to get themselves ready to listen. \n Talk about strengths. Critique isn\u2019t just about what\u2019s not working. \n As a culture and society, we have a tendency to focus on negatives, the things that cause us problems, get in our way, and that we\u2019d like to see changed. We often take the positive for granted. In our project meeting and design discussions, it\u2019s often no different \u2014 we spend the vast majority of time talking about what isn\u2019t working. But that can be harmful. Remember that critique is about honest analysis. It\u2019s balanced, focusing on the design and it\u2019s objectives, regardless of their success. It\u2019s just as important to talk about what is working and why, as it is what isn\u2019t working. \n Often, when talking about the role of \u201cpositive feedback\u201d in critique, we see discussions center on the importance of discussing strengths as a mechanism for making critical feedback easier for the receiver to take. There is a common structure often discussed called the \u201cOREO\u201d or \u201csandwich\u201d method, in which you begin by offering a positive piece of feedback, followed by a negative one, followed by another positive one. It\u2019s a fairly useful technique, which we\u2019ll talk more about in Chapter 5, and there have been studies showing its effectiveness. \n But there are other reasons for making sure that critiques include discussion on what aspects of the design are working toward objectives and why/how. \n Part of the creative process involves the decomposition and abstraction of ideas and then recombining them in different ways or with ideas from somewhere else. It\u2019s a common way in which we take a familiar concept where there is room for improvement or added value and innovate. When we talk about aspects of a product or design that are working, there is the potential for the creators to examine those areas and abstract concepts or elements from them that could be used to strengthen other areas of the design that might not be working as well. \n Additionally, with the understanding that the creator(s) will iterate upon their design after a critique, how much would it suck if at the next critique, you noticed that an aspect of the design that seemed great previously had now been changed and wasn\u2019t quite as effective, all because it hadn\u2019t been talked about, so the team didn\u2019t see a reason not to change it. \n Think about perspective. From whose \u201cangle\u201d are you analyzing the design? \n In the previous section, we talked about preferential critique, or feedback that\u2019s based on personal preferences rather than being tied to objectives for what we\u2019re creating. When we\u2019re analyzing a product, it can be easy to forget that we most likely aren\u2019t representative of the product\u2019s target audience. Even if we are a potential user, we know far more about it than the average user. \n As you analyze a design, it\u2019s important for you to try to balance your expertise with the user\u2019s perspective. It can be a difficult balance to strike, but by simply asking yourself \u201chow am I looking at this\u201d when you examine an aspect of the design and compare your perspective to what you think the user\u2019s might be, you\u2019ve got a good start. From there, you may find that one is clearly more appropriate than the other (i.e. your visceral hatred of the shade of green being used probably doesn\u2019t matter), or perhaps it might be best to bring both up in the discussion. For example: \n \u201cFrom the user\u2019s perspective, I think all of the steps in this flow make sense and are understandable and useable. But from an interaction design perspective, I think there may be some redundancy and opportunities to simplify...\" \n Cropped image on article and category pages by Dan G on Flickr , used under a Creative Commons license .", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/YK8gAhrQt1Y/6-best-practices-for-giving-a-product-critique.html", 
  "title": "6 best practices for giving a product critique"
 }, 
 {
  "content": "Replicating SQLite using Raft Consensus -- clever, he used a consensus algorithm to build a distributed (replicated) SQLite. \n When Open Access is the Norm, How do Scientists Communicate? (PLOS) -- From interviews I\u2019ve conducted with researchers and software developers who are modeling aspects of modern online collaboration, I\u2019ve highlighted the most useful and reproducible practices. (via Jon Udell ) \n Meet DJ Patil -- \u201cIt was this kind of moment when you realize: \u2018Oh, my gosh, I am that stupid,\u2019\u201d he said. \n Interview with Bruce Sterling on the Convergence of Humans and Machines -- If you are a human being, and you are doing computation, you are trying to multiply 17 times five in your head. It feels like thinking. Machines can multiply, too. They must be thinking. They can do math and you can do math. But the math you are doing is not really what cognition is about. Cognition is about stuff like seeing, maneuvering, having wants, desires. Your cat has cognition. Cats cannot multiply 17 times five. They have got their own umwelt (environment). But they are mammalian, you are a mammalian. They are actually a class that includes you. You are much more like your house cat than you are ever going to be like Siri. You and Siri converging, you and your house cat can converge a lot more easily. You can take the imaginary technologies that many post-human enthusiasts have talked about, and you could afflict all of them on a cat. Every one of them would work on a cat. The cat is an ideal laboratory animal for all these transitions and convergences that we want to make for human beings. (via Vaughan Bell )", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/EnsPmefcHaA/four-short-links-17-april-2015.html", 
  "title": "Four short links: 17 April 2015"
 }, 
 {
  "content": "Subscribe to the O'Reilly Radar Podcast to track the technologies and people that will shape our world in the years to come. \n This week on the Radar Podcast, O'Reilly's Mary Treseler chats with Andy Budd , a partner and UX designer at Clearleft . Their wide-ranging conversation circles around lessons learned at Clearleft, understanding who your user really is, and why design agencies have a bright future. Budd also offers some insight into the people and projects he's keeping an eye on, or rather, as he explains, keeping a look out for \u2014 the next big things probably aren't yet on our radar, he says. \n As Clearleft, a user-experience design consultancy, has matured over its 10 or so years, Budd says they've gotten a lot more interested in the psychology and philosophy behind design, how designers' actions affect the world and society in general. The value of design, Budd notes, has been increasing over the past few years, becoming equal to \u2014 or even beginning to surpass \u2014 the prominence technology has traditionally enjoyed: \n When I used to go to technology conferences, six, seven, eight years ago, the general narrative was around actual technology. It was around the developers as heroes around the technical stack being the main differentiator. Design was often lost in the conversation. Now, I think that's changed. I think in the last three or four years, actually the technology stack, and the technology in general, has become a lot more commoditized, with the rise of rapid prototyping tools, with the rises of libraries and frameworks, and also just the general maturation of products. I think it's very rare nowadays that a startup or product company will have, particularly in the Web space, will have a massive competitive advantage, just through technology alone. \n ... \n One of the reasons, I think, is that design is one of the few areas of the technology space, and the Web space, and the digital space that has a competitive advantage because it's really easy to copy an application technology when it launches, and create sort of a 'me-too' product. Actually, it's quite difficult to design a really, really good quality product and get the essence right. We see a lot of companies trying to mimic successful products, but they get them fundamentally wrong. Often, if you're just following on the trends, by the time you've copied somebody's application, another one will come out. The designers push out another new update and you find yourself, again, six months behind the curve. \n ... \n I do think that, fundamentally, those companies that adopt a designful approach are much more likely to increase the delight that their products give, and, ultimately, increase the return of investment they get. Those companies that don't invest in design will find themselves struggling over the years to maintain their market position. \n \n Subscribe to the O'Reilly Radar Podcast \n TuneIn , iTunes , SoundCloud , RSS \n \n \n Your customers aren't who you think they are \n One of the design philosophies embraced at Clearleft traces back to a value list on the Edenspiekermann design agency website, Budd says: \"You're not our customer; your clients are our customer.\" Budd notes that, though it may be painful, it's essential to have a firm grasp on who your end user really is: \n Even though our clients are hiring us, we're designing, not for them and not necessarily for only their needs and their stakeholder needs, but we're really trying to see through that and design for their users. That can be painful because sometimes putting on that lens of the user needs can really highlight some fundamental failings within the structure or the approach or the outlook of our clients. ... Ultimately, what we're trying to do is we're trying to empathize with the user and trying to put the user's needs first. I truly believe that if you put the user's needs first, you can align those needs with the needs of the organization. It's much easier to align the organization's needs to the user's, then trying to somehow force the user's needs to the organization. \n Portents of promise? \n In a recent blog post , Budd looked at the much-hyped \"death of the agency\" debate, declaring it \"greatly exaggerated.\" In his conversation with Treseler, Budd says it's actually quite the opposite situation, that companies like Capital One buying agencies like Adaptive Path aren't the portents of doom they may seem: \n The reason that Adaptive Path were bought out wasn't necessarily because they were struggling to find work. If anything, it was because Capital One valued them so much, and valued the design thinking so much, that they made them an offer that they couldn't refuse, to say we want all of this great talent to come in house. I don't think that's necessarily a failing of design, I think it's actually showing how important, how powerful design is. \n ... \n I think that a lot of the stuff that's happening at the moment isn't something to be worried about, and isn't a warning sign on the wall that agencies are dead. I think what it is, is it's saying that agencies are so important now, are so valuable and design is so highly prized, that these agencies are having a much bigger impact on the world. I think that if design was failing, these agencies would be going out of business because there's no market. When in fact, I think what's happening is they're going out of business because the market is so valuable that they're being bought rather than disappearing because of poor cash flow. I think it's a positive sign. \n Designers on the brink \n Five or six years ago, Budd says, he could have written out a list of the designers he found interesting or exciting, but things are different today; the difference, he explains, is that the industry has matured \u2014 where there were maybe 200 or even 2,000 designers doing incredible work seven or eight years ago, it's 20,000 today. Budd isn't keeping his eye on the limelight, he says \u2014 the next amazing designer probably isn't even on our radar yet: \n The things I'm really interested in are the people I don't know about. There's all this amazing work going on that me and you and your listeners have never heard of. People who are doing great work in basements, in bedrooms, in co-working spaces around the world. They might not be well-known bloggers, they might not be well-known Twitter or Pinterest personalities, but they're amazing designers with amazing products. For me, that's the weird thing: The best people are the ones that have yet to publish their work, who are waiting on the precipice. \n It's kind of that whole thing about the future is here, it's just not evenly distributed. I think if you're focusing on particular individuals, they're already known by a certain number of people for a few years. It's the unknown people that excite me. ...That's the thing that excites me: the richness and maturity of our industry. There's not one or two leaders now, there's thousands of them. \n \n \n Design drives the future. \n The online format brings this conference directly to you, as six leading designers share their knowledge, tools, techniques, and tips. Happening May 20, 2015. \n View the program > \n Cropped image by Marja van Bochove on Flickr , used under a Creative Commons license .", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/px8D3S19Pic/experience-design-gives-you-the-competitive-edge.html", 
  "title": "Experience design gives you the competitive edge"
 }, 
 {
  "content": "DeepDive -- DeepDive is targeted to help users extract relations between entities from data and make inferences about facts involving the entities. DeepDive can process structured, unstructured, clean, or noisy data and outputs the results into a database. \n From the Vault: Watching (and re-watching) \u201cThe Mother of All Demos\u201d -- \u201cI wish there was more about the social vision for computing\u2014I worked with him for a long time, and Doug was always thinking \u2018how can we collectively collaborate,\u2019 like a sort of rock band.\u201d \n Running Kafka at Scale (LinkedIn Engineering) -- This tiered infrastructure solves many problems, but it greatly complicates monitoring Kafka and assuring its health. While a single Kafka cluster, when running normally, will not lose messages, the introduction of additional tiers, along with additional components such as mirror makers, creates myriad points of failure where messages can disappear. In addition to monitoring the Kafka clusters and their health, we needed to create a means to assure that all messages produced are present in each of the tiers, and make it to the critical consumers of that data. \n 3D Printing Titanium, and the Bin of Broken Dreams -- you will learn HUGE amounts on the challenges of real-world manufacturing by reading this.", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/qxQQ0W4eVW8/four-short-links-16-april-2015.html", 
  "title": "Four short links: 16 April 2015"
 }, 
 {
  "content": "Data processing in the enterprise goes very swiftly from \"good enough\" to \"we need to be faster!\" as expectations grow. The Zeta Architecture is an enterprise architecture that enables simplified business processes and defines a scalable way for increasing the speed of integrating data into the business. Following a bit of history and a description of the architecture, I'll use Google as an example and look at the way the company deploys technologies for Gmail. \n Origin story and motivation \n I\u2019ve worked on a variety of different information systems over my career, each with their own classes of challenge. The most interesting from a capacity perspective was for a company that delivers digital advertising. The biggest technical problems in that industry flow from the sheer volume of transactions that occur on a daily basis. Traffic flows in all hours of the day, but there are certainly peak periods, which means all planning must revolve around the capacity during the peak hours. This solution space isn\u2019t altogether different than that of Amazon; they had to build their infrastructure to handle massive loads of peak traffic. Both Amazon and digital advertising, incidentally, have a Black Friday spike. \n Many different architectural ideas came to my mind while I was in digital advertising. Real-time performance tracking of the advertising platform was one such thing. This was well before real-time became a hot buzzword in the technology industry. There was a point in time where this digital advertising company was \u201csatisfied\u201d with, or perhaps tolerated, having a two-to-three-hour delay between making changes to the system and having complete insight into the effects of the changes. After nearly a year at this company, I was finally able to get a large architectural change made to streamline log collection and management. Before the implementation started, I told everyone involved what would happen. Although this approach would enable the business to see the performance within approximately 5-10 minutes of the time a change was made, that this would not be good enough after people got a feel for what real-time could deliver. Since people didn\u2019t have that taste in their mouths, they wouldn\u2019t yet support going straight to real-time for this information. The implementation of this architecture was in place a few months after I departed the company for a new opportunity. The implementation worked great, and after about three months of experience with the new architecture, my former colleagues contacted me and told me they were looking to re-architect the entire solution to go to real time. \n You might be wondering why I have decided to share this anecdote. It\u2019s simple: \u201cGood enough\u201d doesn\u2019t exist when it comes to technology. It is just a matter of time before people want more and faster. I predicted that my colleagues\u2019 expectations would quickly change, and it proved to be true. \n All of those expectations got me thinking, \u201cwhat could I do to protect against those new expectations that I knew were bound to happen?\u201d Over the following few months, I worked through the ramifications to all the pieces of an enterprise architecture to help solve this. But there was still something missing. I couldn\u2019t put my finger on it until I attended 2014 MesosCon in Chicago. Finally, the last piece of my architecture was sitting in front of me. I was missing global resource management. When I added that in, it opened up new doors and new ways to benefit from the rest of the pieces of my architecture. Suddenly it hit me: the strategic combination of all of these pieces was greater than the sum of each of the parts. \n High-level components with descriptions \n The high-level component view of this architecture is intended to support the goals defined for this new architecture. It is not intended to dictate which specific software or project, open source or otherwise, that must be used. There are seven pluggable components of this new architecture, and all of the components must work together: \n \n Distributed file system \u2014 Utilizing a shared distributed file system, all applications will be able to read and write to a common location, which enables simplification of the rest of the architecture. \n Real-time data storage \u2014 This supports the need for high-speed business applications through the use of real-time databases. \n Pluggable compute model / execution engine \u2014 Different groups within a business have different needs and requirements for meeting the demands put upon them at any given time, which requires the support of potentially different engines and models to meet the needs of the business. \n Deployment / container management system \u2014 The need for having a standardized approach for deploying software are important and all resource consumers should be able to be isolated and deployed in a standard way. \n Solution architecture \u2014 This focuses on solving a particular business problem. There may be one or more applications built to deliver the complete solution. These solution architectures generally encompass a higher level interaction amongst common algorithms or libraries, software components, and business workflows. All too often, solution architectures are folded into enterprise architectures, but there is a clear separation with the Zeta Architecture. \n Enterprise applications \u2014 In the past, these applications would drive the rest of the architecture. However, in this new model, there is a shift. The rest of the architecture now simplifies these applications by delivering the components necessary to realize all of the business goals we are defining for this architecture. \n Dynamic and global resource management \u2014 Allows dynamic allocation of resources to enable the business to easily accommodate for whatever task is the most important today. \n \n After putting all of my ideas on paper, there were two things I still needed to do: design a visual representation to explain this architecture and, most importantly, name it. After finally coming up with a visual representation that was simple to understand, a name finally came to me. Thus was the Zeta Architecture begotten (I'll tell you the way I came up with the name in a future post). \n While thinking through the visuals and implementation details of this architecture, something else hit me. I stumbled upon a way to document Google\u2019s architecture. I\u2019ve never seen Google document what I will call their enterprise architecture, but this is it. This diagram maps out how Google operates its technology stack, with Gmail as a use case. This architecture will allow anyone who implements it to be able to run at Google scale and efficiency. \n [caption id=\"attachment_75730\" align=\"aligncenter\" width=\"570\"] Image courtesy of Jim Scott. [/caption] \n There are a couple of the interesting points about Google\u2019s technologies in this diagram. Borg is sometimes referred to as the project that is unnamed within Google, but outside of Google, it\u2019s called Borg. Omega is their scheduler , and it is the crux of their dynamic distributed resource management. It figures out where and when to place jobs. Google has mentored open source projects like Apache Mesos, which takes many cues from Omega. From a solution architecture perspective, Gmail conceptually operates on top of a recommendation engine. The machine learning concepts in general are delivered in many of the products Google offers. \n What else? \n Web servers generate logs, they land on a local disk, and the logs are periodically rotated so they can be shipped elsewhere. They are moved to some other servers for data processing, and then jobs are run on the logs. This is a pretty standard story, and it isn\u2019t so bad at small scale, but a lot of work goes into log shipping at scale. So, how could we make it better? We should run the distributed file system across all of these servers that are running Web servers. Logs would still get generated, but now they would land on the distributed file system. No other changes required, log shipping goes away, and the data is immediately available to the compute model / execution engine for analytics or any other process the business needs. There is a lot less monitoring required from the IT operations perspective. \n [caption id=\"attachment_75731\" align=\"aligncenter\" width=\"570\"] Image courtesy of Jim Scott. [/caption] \n If logs don\u2019t have to be shipped, then technologies like Flume or Kafka can be removed from some application architectures. This does not obsolete those technologies; instead, those technologies should be used for use cases where streaming or queuing data makes sense. Overall, this is a big process simplification. In the anecdote I shared at the beginning of this article, we used Flume as the solution. My coworkers were able to configure and tune Flume to handle more than 1.5 million log lines per second, sustained throughout the day, and it worked fine. There were only hundreds or thousands of hours put into designing and building the solution, and then of course, managing it and maintaining the code base and configuration for deployment. Of course, we can\u2019t forget that it also needed to be monitored. All of those things become unnecessary with the Zeta Architecture, at least for this use case. \n Less is more \n Nearly every application architecture needs to concern itself with many different things, including data protection schemes, how to backup data, recovery from failures, load balancing, and even running multiple versions of software. The Zeta Architecture simplifies those application architectures because it delivers or supports those important issues. Fewer moving parts means fewer potential failure points. Better hardware utilization means less to operate and lower operational costs. The business is then capable of leveraging a global set of resources to solve any problem based on what is most important right now. These days, priority number one seems to change fast and often, and this architecture supports a business that needs to change things instantly. \n [caption id=\"attachment_75732\" align=\"aligncenter\" width=\"570\"] Web server before Zeta. Image courtesy of Jim Scott. [/caption] \n \n [caption id=\"attachment_75733\" align=\"aligncenter\" width=\"570\"] Web server after Zeta. Image courtesy of Jim Scott. [/caption] \n Additional materials \n If you\u2019re interested in learning more, I have written a free downloadable technical white paper documenting the Zeta Architecture . I have also written a free downloadable executive summary titled Building the Data-Centric Enterprise that covers this topic. \n Cropped image by Chris Ford on Flickr , used under a Creative Commons license .", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/04WtyGht0Z4/zeta-architecture-hexagon-is-the-new-circle.html", 
  "title": "Zeta Architecture: Hexagon is the new circle"
 }, 
 {
  "content": "Facebook Biometrics Cache (Business Insider) -- Facebook has been accused of violating the privacy of its users by collecting their facial data, according to a class-action lawsuit filed last week. This data-collection program led to its well-known automatic face-tagging service. But it also helped Facebook create \u201cthe largest privately held stash of biometric face-recognition data in the world,\u201d the Courthouse News Service reports. \n The Clustering of Time Series Sequences is Meaningless (PDF) -- Clustering of time series subsequences is meaningless. More concretely, clusters extracted from these time series are forced to obey a certain constraint that is pathologically unlikely to be satisfied by any data set, and because of this, the clusters extracted by any clustering algorithm are essentially random. While this constraint can be intuitively demonstrated with a simple illustration and is simple to prove, it has never appeared in the literature. We can justify calling our claim surprising since it invalidates the contribution of dozens of previously published papers. We will justify our claim with a theorem, illustrative examples, and a comprehensive set of experiments on reimplementations of previous work. From 2003, warning against sliding window techniques. \n Toolkits for the Mind (MIT TR) -- Programming\u2013language designer Guido van Rossum, who spent seven years at Google and now works at Dropbox, says that once a software company gets to be a certain size, the only way to stave off chaos is to use a language that requires more from the programmer up front. \u201cIt feels like it\u2019s slowing you down because you have to say everything three times,\u201d van Rossum says. Amen! \n Robots Roam Earth's Imperiled Oceans (Wired) -- It\u2019s six feet long and shaped like an airliner, with two wings and a tail fin, and bears the message, \u201cOCEANOGRAPHIC INSTRUMENT PLEASE DO NOT DISTURB.\u201d All caps considered, though, it\u2019s a more innocuous epigram than the one on a drone I saw back at the dock: \u201cNot a weapon \u2014 Science Instrument.\u201d", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/K_sx1O7dIoU/four-short-links-15-april-2015.html", 
  "title": "Four short links: 15 April 2015"
 }, 
 {
  "content": "Subscribe to the O'Reilly Solid podcast to stay on top of topics related to the Internet of Things, hardware, software, manufacturing, and the blurring of the physical and virtual worlds. \n [caption id=\"attachment_75766\" align=\"aligncenter\" width=\"570\"]  The Arecibo Observatory in Puerto Rico, where Dennis Wingo and his team established contact with the ISEE-3 satellite. Public domain image: Wikipedia . [/caption] \n In the first episode of the Solid Podcast , we talked with Dennis Wingo , founder of Skycorp , in the former NASA McDonald's where he's been restoring the first images of the moon taken from space. \n After an hour of recounting his techno-archaeology exploits \u2014 reverse-engineering the arcane analog image-transmission systems that NASA's engineers developed in the 1960s \u2014 Dennis paused and said, \"and that's just\u00a0 one of our history projects.\" \n That teaser is where we begin today's episode. Ready to apply modern computing to another analog challenge, Dennis turned his attention to the reboot of the International Sun/Earth Explorer-3 , a research satellite launched in 1978 and commended to the heavens in 1997. \n NASA decommissioned the equipment for communicating with the satellite in 1999, so Dennis set about reverse-engineering the ISEE-3's control system and devising a way to communicate with it. In the 1970s, he would have needed custom analog hardware, but now, general-purpose hardware is powerful enough that he could do it all with software. \n \n \n Solid returns to Fort Mason June 23\u201325, 2015. \n Solid covers everything essential and intriguing about the IoT and beyond: from robotics, drones, and wearables to advanced materials, UX design, digital fabrication, security, and hardware prototyping. One attendee called it \u201cmore than a bit mind blowing.\u201d \n View the program > \n Wingo's team built a system on top of an Ettus software-defined radio that could analyze the satellite's 2.2-gigahertz S band signal; all that remained was to transmit a wake-up call and then listen through a receiver powerful enough to hear the 36-year-old satellite's signal. The Arecibo Observatory in Puerto Rico did just that. \n The \" steely-eyed missile men \" of the 1970s had done some magnificent engineering work. When Wingo re-established contact with the satellite, it was off course by 3,000 kilometers \u2014 after traveling 24 billion kilometers. \n The story is an excellent illustration of how software can replace physical complexity \u2014 one of the key themes we follow at the Solid conference , and Dennis will deliver a keynote at Solid San Francisco in June ,\u00a0where he'll talk about his extraordinary combination of techno-archaeology and modern computing. \n \n Subscribe to the O'Reilly Solid Podcast \n TuneIn , iTunes , SoundCloud , RSS \n \n \n The Solid Podcast is hosted by Jon Bruner and David Cranor , and focuses on the people, ideas, and technology that we feature at the O\u2019Reilly Solid Conference . Episodes are edited by Brian Burge, with closing music by Thaddeus Bromstrup.", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/_lf1DjXt5Nw/rebooting-a-1970s-satellite-with-modern-software-and-hardware.html", 
  "title": "Rebooting a 1970s satellite with modern software and hardware"
 }, 
 {
  "content": "Editor's note: this post is part of our investigation into the future of money. The full video compilation from our first event, Bitcoin & the Blockchain, is now available . \n The vision for bitcoin and the blockchain is unabashedly optimistic, though already it is being realized. More and more technologists, venture capitalists, financial institutions, and even regulators are seeing its long-term potential to transform industries, from financial services to data management to the Internet of Things. In the medium term, there remain hurdles to overcome before blockchain technology can offer sufficiently compelling solutions for the complex financial and technological world we live in, but there is progress to date \u2014 and it\u2019s promising. \n Blockchain-based remittance vehicles offered by Coins.ph , BitPagos , and BitPesa , though early stage, aim to take a chunk of the $450 billion remittance industry by offering speedier, more efficient, and cheaper alternatives to traditional solutions. BitPay offers bitcoin/fiat payment processing for merchants as well as bank integration. Increasingly, private investors are diversifying their portfolios by purchasing bitcoin alongside traditional assets. Most recently, Coinbase even received funding from a group of blue-chip investors, including the New York Stock Exchange, and launched its own exchange, signaling both greater acceptance by the financial services industry as well as confidence in its future value. Ripple Labs has taken a very different approach with its protocol, permitting the decentralized transmission of practically any currency type \u2014 cryptographic or fiat \u2014 like an SMTP for money, and circumventing traditional payment networks. And to this end, it\u2019s already inked agreements with Cross River Bank (New Jersey), CBW Bank (Kansas), and Fidor Bank (Germany), with more on the horizon. \n What\u2019s more, the U.S. regulatory regime is warming to digital currency. New York\u2019s Department of Financial Services has been engaged and is using its BitLicense to chart a path for regulating \u2014 and ensuring public trust in \u2014 the industry. The same attitude has been reflected by both FinCEN and the SEC as well. California recently lifted its \u201cbitcoin ban\u201d and has followed New York\u2019s footsteps by proposing its own (albeit problematic) BitLicense . Since last spring, the Federal Election Committee has allowed limited donations in bitcoin to political candidates. And in response, the digital currency industry has been more than cooperative, working hard to protect consumers, abide by Anti-Money Laundering (AML) and Know Your Customer (KYC) laws, and iterate quickly following security snafus. We still await good federal legislation to replace the unwieldy state-by-state regulatory pastiche that seems to be forming, but it\u2019s coming \u2014 the regulatory picture is becoming clearer. For potential investors, clients, and business partners, the assurance that digital currency companies are legitimate is an important step. \n On the horizon: non-monetary applications of the blockchain \n These developments undoubtedly portend a promising future, though we still have a long way to go. Perhaps surprisingly, the non-monetary applications of bitcoin\u2019s technology might be the most interesting thing about it. The \u201ccoin\u201d itself, after all, is merely a cryptographic asset whose content specifications and applications can be retooled for a range of purposes. Companies like Filament and IBM , for example, have begun exploring how the specially designed decentralized ledgers can be used to enable devices to communicate service needs and other information among their owners and vendors for household, commercial, and industrial purposes. Similarly, Factom, Maidsafe , and Storj are solving how the blockchain can be used to cryptographically secure, store, and update data \u2014 not only to improve the protection of data from loss or theft, but also to protect owner privacy. The range of use cases and benefits is hard to overstate: connected automobiles or industrial equipment that could report repair needs and schedule maintenance, washing machines that can order more detergent when levels are low, more standardized and secure electronic medical records systems, and more. \n Moreover, existing digital currency protocols are evolving to become properly useful to the financial services industry, though there is progress to be made, too. Remittance, payments, and exchange services are important; however, financial instruments such as complex debt instruments that depend upon mortgages and fractional reserve lending are financial services\u2019 lifeblood, yet today are technically impossible. \u201cBlockchain 2.0\u201d-type projects like Ethereum and Ripple\u2019s Codius hold real promise in this regard, but they are still under development. And once these developments can be readily deployed, they should offer a truly unprecedented range of new financial, legal, and commercial possibilities fueled by vast libraries of decentralize apps (\u201cDApps\u201d), including self-executing smart contracts, smart oracles , and more. \n In getting there, the digital currency world and established industries need each other now more than ever. On the one hand, older industries undoubtedly have much to gain by actively participating in the ongoing blockchain development process. IBM, mentioned earlier, has most definitely realized this with the contribution of its ADEPT protocol; MasterCard has kept its options open in this direction, too, with the inclusion of digital currency in its proposed Global Shopping Cart . Banks, telcos, home electronics companies, shipping companies, and auto manufacturers should all follow suit. All have something to gain by not only investing in new blockchain technologies, but helping new companies understand and navigate their landscapes more effectively in order to produce truly transformative products. \n It behooves many in the digital currency community to seek out financial relationships early on to bridge the knowledge gap. \n The blockchain and digital currency worlds, in turn, have much to gain from better understanding the deep needs and inefficiencies of the sectors they\u2019re entering. Finance is one looming example. A common and disconcerting refrain among the financial services professionals I interact with is that, although there are certainly exceptions, many developers don\u2019t sufficiently understand a number of the financial processes they intend to disrupt \u2014 e.g., how credit cards work, how and why the Federal Reserve moves interest rates, how derivatives work, how equities trades are cleared, why fractional reserve banking is essential, etc. That\u2019s hardly surprising given finance\u2019s complexity, but it ultimately means that some innovations either aren\u2019t as useful as some hope or they create more problems than they solve. For that reason, it behooves many in the digital currency community to seek out financial relationships early on to bridge the knowledge gap and invent even more disruptive products and processes. Mutatis mutandis , the same could be said for any other industry. \n All told, these first chapters of bitcoin and the blockchain are riveting, but there are more to write. The story invites all to contribute \u2014 not just coders and investors, but engineers, bankers, and especially innovators. And the more that contribute, the better and faster that story will be written. So let\u2019s keep writing it. \n Cropped image on article and category pages by Hiroyuki Takeda on Flickr , used under a Creative Commons license .", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/6CjYCWerZIs/beyond-bitcoin-and-the-blockchain-to-booming-business.html", 
  "title": "Beyond bitcoin and the blockchain to booming business"
 }, 
 {
  "content": "Pycon 2015: Technical Debt, The Monster in Your Closet (YouTube) -- excellent talk from PyCon. See also slides . \n A/A Testing -- In an A/A test, you run a test using the exact same options for both \u201cvariants\u201d in your test. That\u2019s right, there\u2019s no difference between \u201cA\u201d and \u201cB\u201d in an A/A test. It sounds stupid, until you see the \u201cresults.\u201d (via Nelson Minar ) \n NSA Declares War on General-Purpose Computing (BoingBoing) -- NSA director Michael S Rogers says his agency wants \"front doors\" to all cryptography used in the USA, so that no one can have secrets it can't spy on -- but what he really means is that he wants to be in charge of which software can run on any general purpose computer. \n John von Neumann Documentary (YouTube) -- 1966 documentary from the American Mathematical Association on the father of digital computing, who also is hailed as the father of game theory and much much more . (via Paul Walker )", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/er_UVUuHzao/four-short-links-14-april-2015.html", 
  "title": "Four short links: 14 April 2015"
 }, 
 {
  "content": "The Great Reversal in the Demand for Skill and Cognitive Tasks (PDF) -- The only difference with more conventional models of skill-biased technological change is our modelling of the fruits of cognitive employment as creating a stock instead of a pure flow. This slight change causes technological change to generate a boom and bust cycle, as is common in most investment models. We also incorporated into this model a standard selection process whereby individuals sort into occupations based on their comparative advantage. The selection process is the key mechanism that explains why a reduction in the demand for cognitive tasks, which are predominantly filled by higher educated workers, can result in a loss of employment concentrated among lower educated workers. While we do not claim that our model is the only structure that can explain the observations we present, we believe it gives a very simple and intuitive explanation to the changes pre- and post-2000. \n provinces -- state and province lists for (some) countries. \n Cultural Analytics -- the use of computational and visualization methods for the analysis of massive cultural data sets and flows. Interesting visualisations as well as automated understandings. \n The Code is Just the Symptom -- The engineering culture was a three-layer cake of dysfunction, where everyone down the chain had to execute what they knew to be an impossible task, at impossible speeds, perfectly. It was like the games of Simon Says and Telephone combined to bad effect. Most engineers will have flashbacks at these descriptions. Trigger warning: candid descriptions of real immature software organisations.", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/9tZqsGirpQA/four-short-links-13-april-2015.html", 
  "title": "Four short links: 13 April 2015"
 }, 
 {
  "content": "Download a free copy of Python in Education . Editor's note: this is an excerpt from Python in Education, a free report written by Nicholas Tollervey. \n I am going to answer a very simple question: which features of the Python language itself make it appropriate for education? This will involve learning a little Python and reading some code. But don\u2019t worry if you\u2019re not a coder! This chapter will hopefully open your eyes to how easy it is to learn Python (and thus, why it is such a popular choice as a teaching language). \n Code readability \n When I write a to-do list on a piece of paper, it looks something like this: \n \nShopping\nFix broken gutter\nMow the lawn \n This is an obvious list of items. If I wanted to break down my to-do list a bit further, I might write something like this: \n \nShopping:\n Eggs\n Bacon\n Tomatoes\nFix broken gutter:\n Borrow ladder from next door\n Find hammer and nails\n Return ladder!\nMow the lawn:\n Check lawn around pond for frogs\n Check mower fuel level \n Intuitively, we understand that the main tasks are broken down into sub-tasks that are indented underneath the main task to which they relate. This makes it easy to see, at a glance, how the tasks relate to each other. \n \n This is called scoping. \n Indenting in this manner is also how Python organizes the various tasks defined in Python programs. For example, the following code simply says that there is a function called say_hello that asks the user to input their name, and then &mdsh you guessed it \u2014 prints a friendly greeting: \n \ndef say_hello():\n name = input('What is your name? ')\n print('Hello, ' + name)\n \n Here\u2019s this code in action (including my user input): \n \nWhat is your name? Nicholas\nHello, Nicholas \n [caption id=\"attachment_75689\" align=\"alignleft\" width=\"233\"]  Download the free ebook. [/caption]\n Notice how the lines of code implementing the say_hello function are indented just like the to-do list. Furthermore, each instruction in the code is on its own line. The code is easy to read and understand: it is obvious which lines of code relate to each other just by looking at the way the code is indented. \n Most other computer languages use syntactic symbols rather than indentation to indicate scope. For example, many languages such as Java, JavaScript, and C use curly braces and semicolons for this purpose. \n Why is this important? \n If, like me, you have taught students with English as an additional language or who have a special educational need such as dyslexia, then you will realize that Python\u2019s intuitive indentation is something people the world over understand (no matter their linguistic background). A lack of confusing symbols such as '{', '}' and ';' scattered around the code also make it a lot easier to read Python code. Such indentation rules also guide how the code should look when you write it down \u2014 the students intuitively understand how to present their work. \n Compared to most other languages, Python\u2019s syntax (how it is written) is simple and easy to understand. For example, the following code written using the Perl programming language will look for duplicate words in a text document: \n \nprint \"$.: doubled $_\\n\" while /\\b(\\w+)\\b\\s+\\b\\1\\b/gi \n Can you work out how Perl does this? \n (In Perl\u2019s defense, it is an amazingly powerful programming language with a different set of aims and objectives than Python. That\u2019s the point \u2014 you wouldn\u2019t try to teach a person how to read with James Joyce\u2019s Ulysses , despite it being widely regarded as one of the top English-language novels of the 20th century.) \n Put simply, because you don\u2019t have to concentrate on how to read or write Python code, you can put more effort into actually understanding it. Anything that lowers the effort required to engage in programming is a good thing in an educational context (actually, one could argue that this is true in all contexts). \n Obvious simplicity \n The simple core concepts and knowledge required to write Python code will get you quite far. That they are easy to learn, use, and remember is another characteristic in Python\u2019s favor. Furthermore, Python is an obvious programming language \u2014 it tries to do the expected thing and will complain if you, the programmer, attempt to do something clearly wrong. It\u2019s also obvious in a second sense \u2014 it names various concepts using commonly understood English words. \n Consider the following two examples: \n In some languages, if you want to create a list of things, you have to use variously named constructs such as arrays, arraylists, vectors, and collections. In Python, you use something called a list. Here\u2019s my to-do list from earlier written in Python: \n \ntodo_list = ['Shopping', 'Fix broken gutter', 'Mow the lawn']\n \n This code assigns a list of values (strings of characters containing words that describe tasks in my to-do list) to an object named todo_list (which I can reuse later to refer to this specific list of items). \n In some languages, if you want to create a data dictionary that allows you to store and look up named values (a basic key/value store), you\u2019d use constructs called hashtables, associative arrays, maps, or tables. In Python, you use something called a dictionary. Here\u2019s a data dictionary of a small selection of random capital cities: \n \ncapital_cities = {\n 'China': 'Beijing'\n 'Germany': 'Berlin',\n 'Greece': 'Athens',\n 'Russia': 'Moscow',\n 'United Kingdom': 'London',\n} \n I\u2019ve simply assigned the dictionary to the capital_cities object. If I want to look up a capital city for a certain country, I reference the county\u2019s name in square brackets next to the object named capital_cities : \n \ncapital_cities['China']\n'Beijing'\n \n Many programming languages have data structures that work like Python\u2019s lists and dictionaries; some of them do the obvious thing and call such constructs \u201clists\u201d and \u201cdictionaries\u201d; some other languages make using such constructs as easy and obvious as Python (although many don\u2019t). Python\u2019s advantage is that it does all three of these things : it has useful data structures as a core part of the language, it gives them obvious names, and makes them extraordinarily easy to use. Such usefulness, simplicity, and clarity is another case of removing barriers to engaging with programming. \n As mentioned earlier, Python also does the expected thing. For example, if I try to sum together an empty dictionary and an empty list (something that\u2019s obviously wrong \u2014 evidence that I\u2019ve misunderstood what I\u2019m trying to do) Python will complain: \n \n>>> {} + []\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nTypeError: unsupported operand type(s) for +: 'dict' and 'list' \n This is simply telling me that I can\u2019t use the \u201c+\u201d operand to sum a dictionary and a list. This is to be expected, rather obvious, and quite helpful. \n Nevertheless, other languages try to be less strict and more forgiving of the programmer. While this may sound like a good idea, it means that faulty code like that attempted above will be executed without any error and cause uncertain results (after all, what is the answer of summing a dictionary and a list?). Here\u2019s what the ubiquitous JavaScript language will do when you attempt to add the equivalent data structures (in JavaScript parlance, an object '{}' and an array '[]'): \n \n> {} + []\n0 \n Of course, the answer is obviously zero!?! \n Guess what happens if you try to sum an empty array with an object in JavaScript (we switch around the summed terms). \n \n> [] + {}\n\"[object Object]\"\n \n I bet you were expecting a consistent result! \n (Again, the caveat of JavaScript having a different set of aims and objectives to Python should be applied here.) \n Learning, by its very nature, involves making mistakes and realizing that mistakes have been made. Only then can behavior be adjusted and progress made. If you\u2019re learning to program using a language like JavaScript (that would rather make what appears to be a best guess at what you mean, rather than complain about an obvious error), then all sorts of mistakes will pass by unnoticed. Instead, you\u2019ll either continue in your mistaken view of the programming world, or you\u2019ll have to understand the rather complex and tortuous rules that JavaScript uses to cause {} + [] to equal 0 and [] + {} to equal \"[object Object]\" (itself, a difficult educational feat to pull off). \n Python\u2019s simplicity and obviousness encourages learners and professional developers alike to create understandable code. Understandable code is easier to maintain and less likely to contain bugs (because many bugs are caused by misunderstanding what the code is actually doing compared to what you mistakenly think it ought to be doing ). Being able to simply state your ideas in code is a very powerful and empowering capability. \n For example, consider an old-school text adventure game. Players wander around a world consisting of locations that have descriptions and exits to other locations. The program below very clearly and simply implements exactly that. \n Most of the program consists of either comments to explain how it works or is a data dictionary that describes the game world. It is only the final block of code that actually defines the behavior of the game. It is my hunch, even if you\u2019re not a programmer, that you\u2019ll be able to get the gist of how it works. \n \n\"\"\"\nA very simple adventure game written in Python 3.\n\nThe \"world\" is a data structure that describes the game\nworld we want to explore. It's made up of key/value fields\nthat describe locations. Each location has a description\nand one or more exits to other locations. Such records are\nimplemented as dictionaries.\n\nThe code at the very end creates a game \"loop\" that causes\nmultiple turns to take place in the game. Each turn displays\nthe user's location, available exits, asks the user where\nto go next and then responds appropriately to the user's\ninput.\n\"\"\"\n\n\nworld = {\n 'cave': {\n  'description': 'You are in a mysterious cave.',\n  'exits': {\n   'up': 'courtyard',\n  },\n },\n 'tower': {\n  'description': 'You are at the top of a tall tower.',\n  'exits': {\n   'down': 'gatehouse',\n  },\n },\n 'courtyard': {\n  'description': 'You are in the castle courtyard.',\n  'exits': {\n   'south': 'gatehouse',\n   'down': 'cave'\n  },\n },\n 'gatehouse': {\n  'description': 'You are at the gates of a castle.',\n  'exits': {\n   'south': 'forest',\n   'up': 'tower',\n   'north': 'courtyard',\n  },\n },\n 'forest': {\n  'description': 'You are in a forest glade.',\n  'exits': {\n   'north': 'gatehouse',\n  },\n },\n}\n\n\n# Set a default starting point.\nplace = 'cave'\n# Start the game \"loop\" that will keep making new turns.\nwhile True:\n # Get the current location from the world.\n location = world[place]\n # Print the location's description and exits.\n print(location['description'])\n print('Exits:')\n print(', '.join(location['exits'].keys()))\n # Get user input.\n direction = input('Where now? ').strip().lower()\n # Parse the user input...\n if direction == 'quit':\n  print('Bye!')\n  break # Break out of the game loop and end.\n elif direction in location['exits']:\n  # Set new place in world.\n  place = location['exits'][direction]\n else:\n  # That exit doesn't exist!\n  print(\"I don't understand!\")\n \n A typical \u201cgame\u201d (including user input) looks something like this: \n \n$ python adventure.py\nYou are in a mysterious cave.\nExits:\nup\nWhere now? up\nYou are in the castle courtyard.\nExits:\nsouth, down\nWhere now? south\nYou are at the gates of a castle.\nExits:\nsouth, north, up\nWhere now? hello\nI don't understand!\nYou are at the gates of a castle.\nExits:\nsouth, north, up\nWhere now? quit\nBye!\n \n Furthermore, from an educational point of view, this simple adventure game can be modified in all sorts of interesting and obvious ways by learners: adding objects to the world, creating puzzles, adding more advanced commands, and so on. In fact, there are opportunities for cross-curricular work with other disciplines. Playing such a game is a form of interactive fiction \u2014 perhaps the English department could help the students come up with more than just the bare-bones descriptions of the original? \n Open extensibility \n Despite the powerful simplicity of the core language, programmers often need to reuse existing library modules of code to achieve a common task. A library module is like a recipe book of instructions for carrying out certain related tasks. It means programmers don\u2019t have to start from scratch or reinvent the wheel every time they encounter a common problem. \n While most programming languages have mechanisms to write and reuse libraries of code, Python is especially blessed in having a large and extensive standard library (built into the core language) as well as a thriving ecosystem of third-party modules. \n For example, a common task is to retrieve data from a website. We can use the requests third-party module to download Web pages using Python: \n \n>>> import requests\n>>> response = requests.get('http://python.org/')\n>>> response.ok\nTrue\n>>> response.text[:42]\n'<!doctype html>\\n<!--[if lt IE 7]> <html '\n \n (This code tells Python that we want to use the requests library, gets the HTML for Python\u2019s home page , checks that the response was a success [it was] and displays the first 42 characters of the resulting HTML document.) \n Some modules, such as requests , do one thing and do it exceptionally well. Other modules are organized into large libraries to create application frameworks that solve many of the repetitive tasks needed when writing common types of application. \n For example, Django is an application framework for writing Web applications (as used by Mozilla, The Guardian, National Geographic, NASA, and Instagram, among others). Django looks after common tasks such as modelling data, interacting with a database, writing templates for Web pages, security, scalability, deciding where to put business logic, and so on. Because this has already been taken care of by Django, developers are able to concentrate on the important task of designing websites and implementing business logic. \n Many languages have extensive code libraries and application frameworks, but Python\u2019s strength is in its broad reach. SciPy and NumPy are used by scientists and mathematicians, NLTK (the Natural Language Tool Kit) is used by linguists parsing text, Pandas is used extensively by statisticians, and OpenStack is used to organize and control cloud-based computing resources. The list goes on and on. \n Teaching a language that has such extensive real-world use has an obvious benefit: learners acquire a skill in a programming language that has real economic value. \n Another aspect of being openly extensible is that Python is an open source project. Anyone can take part in developing the language by submitting bug reports or patches to the core developers (led by Guido van Rossum himself). There is also a well-understood and simple process by which new features of the language are proposed and implemented: the Python Enhancement Proposals (PEPs) . In this way, the language is developed in full view of the community that uses it, with the opportunity for the community to inform and guide its future development. This process is explained in great detail by PEP 1 . \n Cross-platform runability \n Python is a platform-agnostic language: it works on Microsoft Windows, Mac OS X, Linux, and many other operating systems and devices. It\u2019s even possible to have Python as a service through websites such as Python Anywhere . \n This is important in an educational context because Python works on the computers used in schools. Students can also use it on the computers they have at home, no matter the make or model they may own. Furthermore, Python, as a service provided via a website, is an excellent solution to the problem of the infamously troll-like school system administrators who won\u2019t let teachers install anything other than Microsoft Office on school PCs. Users simply point their browser at a website, and they are presented with a fully functional Python development environment without having to install any additional software. \n As we have seen, Python also works on small-form devices, such as the Raspberry Pi. It even runs on microcontrollers \u2014 small, low-powered chips designed to run within embedded devices, appliances, remote controls, and toys (among other things). \n The MicroPython project has created a pared-down version of Python 3 that is optimized for such devices, and provides a small electronic circuit board that runs such a svelte version of Python: \n [caption id=\"attachment_75686\" align=\"aligncenter\" width=\"570\"] A MicroPython board (about the same size as a postage stamp). [/caption] \n This very simple Python-based operating system can be used as the basis for all sorts of interesting and fun electronic projects. Add-ons for the board include an LCD display screen, speaker and microphone, and motors. It is a relatively easy task to build a simple robot with such a device. \n More recently, the BBC announced the MicroBit project , a small battery-powered programmable device for children. One million of the devices will be given away to 11-year-olds in the UK at the start of the new academic year in September 2015. It will also be on sale to the public. \n The MicroBit fastens to clothing and has a couple of buttons and an LED matrix that displays scrolling text and images. Just like the Raspberry Pi and Micro Python board, it has the ability to interact with other devices via I/O connections. \n Python is one of three supported languages for programming the MicroBit. \n [caption id=\"attachment_75687\" align=\"aligncenter\" width=\"570\"] A prototype of the BBC\u2019s MicroBit programmable device for children. [/caption] \n The important educational advantage is continuity. \n By learning Python, a student has access to all sorts of fun and interesting platforms that can be explored using tools and code they\u2019re familiar with. Because Python runs on so many platforms, it is feasible to write code for one device and, assuming it doesn\u2019t use device-specific code and run within hardware constraints, it should run on many others. \n Humanity \n While not a strict feature of the language, Python\u2019s community, history, and philosophy often shines through code written in Python. \n The odd Monty Python reference (the website that hosts third-party Python modules is called the Cheese Shop after the sketch about a cheese shop with no cheese), a playful sense of fun (for instance, \u201cthe PyPy project\u201d is so named because it is a high-performance version of Python written in Python), and other apparent eccentricities bestow upon Python the appearance of an approachable and interesting language. It\u2019s obviously used by humans for humans rather than being an abstract tool for esoterics. \n Python\u2019s community is a friendly and diverse bunch. It is to this community of developers, teachers, and students that I want to turn in the next chapter. \n Put simply, the Python community is the secret weapon of its success.", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/OGlXG04ZbAo/five-reasons-why-python-is-a-popular-teaching-language.html", 
  "title": "5 reasons why Python is a popular teaching language"
 }, 
 {
  "content": "Download a free copy of Designing for the Internet of Things , a curated collection of chapters from the O\u2019Reilly Design library. This post is an excerpt from Discussing Design , by Adam Connor and Aaron Irizarry, one of the books included in the curated collection. \n One of the most common ways design discussions are initiated is for a team member to ask for feedback on something they\u2019ve created or an idea they have. They might just grab someone at a nearby desk because they want to take a break from putting something together and think about what they\u2019ve done so far. Or it could be part of a planned milestone or date in the project\u2019s timeline, often called Design Reviews. \n It\u2019s not that either of these is a bad time to get other\u2019s thoughts. Rather, the first real problem we encounter is from the word \u201cfeedback\u201d itself. It\u2019s a word that\u2019s become engrained in our vocabulary. We use it all the time, a la \u201cI\u2019d love to get your feedback on something...\u201d \n What is feedback? \n [caption id=\"attachment_74387\" align=\"alignright\" width=\"237\"]  Download the free ebook. [/caption]The issue with the term \u201cfeedback\u201d lies in its broadness. Feedback itself is nothing more than a reaction or response. Designers talk about feedback and feedback loops all the time in their work. The user of a system or product interacts with it in some way, perhaps by clicking a button, and the system changes in one way or another. It could be that an animated loading bar appears while some new data is fetched and displayed, or maybe some elements in the interface move their position. \n That reaction by the system is the feedback. It is the system\u2019s response to what the user has done. Feedback is a reaction that occurs as a result of us doing something. In human-to-human interactions, such as the conversations we have in our projects, feedback can be nothing more than a gut reaction to whatever is being presented. And to be quite honest, even though we might not want to admit it, that\u2019s often all it is. \n \nReactions might tell us a bit about how someone feels about what has happened or been created, and that can be useful in some cases, but it also presents us with some challenges. As we\u2019ll discuss more in Chapter 2, a reaction doesn\u2019t go far enough to be really helpful in allowing us to improve our creations and move forward in our projects. Not only that, the reaction itself is most likely built upon the biases and preferences of the individual doing the reacting, and in many cases, that individual, whether it\u2019s a developer, designer, stakeholder, etc., is not a representative of the audience for our creation. There is a popular line in many design communities: \u201cYou are not the user.\u201d It\u2019s important to keep that in mind when we\u2019re discussing things we\u2019re creating and deciding what should or shouldn\u2019t be a part of them. \n The problem with asking for feedback is that, most times, we aren\u2019t being specific enough in describing what we really want feedback on. Sometimes we might get a gut reaction. Sometimes we might get a list of instructions or suggestions on what to change. Sometime we might get comments that describe how what we\u2019ve created doesn\u2019t match what the critic would have created, and so on. And weeding through all of that feedback to try to determine what\u2019s of use to us \u2014 what will help us identify the aspects of our design we should iterate upon \u2014 can be a struggle. \n Three kinds of feedback \n As Aaron and I have seen in our own experiences and through watching and working with other teams, there are key characteristics that separate three forms of feedback, all of which vary in their level of usefulness to us in the design process. Understanding these three kinds of feedback can help us understand the conversations we have with our teams and improve our own ability to react to and use feedback to strengthen our creations. \n Reaction \n Good lord! That\u2019s awful! An inebriated cocker spaniel could have done better! \n Reaction-based feedback tends to be emotional and/or visceral. It happens quickly, instinctively. Feedback of this type can often be the most passionate, as it\u2019s driven by an individual\u2019s own expectations, desires, and values. Essentially, it\u2019s a gut reaction. \n There is a second kind of reaction-based feedback that is driven by the individual\u2019s understanding of what they are expected to say, typically driven by a cultural understanding or what they think the presenter wants to hear. In this case, the reaction itself isn\u2019t in regard to what\u2019s being presented, but rather to the situation of simply being asked for feedback in the first place. Examples of this kind of feedback often take the form of: \n That\u2019s wonderful! Great work! I love what you did with... \n Why it can be an issue: At best, this kind of feedback tells us about the subconscious reaction the viewer has to what you\u2019ve created. These kinds of reactions are something we do want to understand when creating a product or service. It\u2019s not ideal to try to sell something potential customers or users cringe at or grumble about the second they see it. But are the people you\u2019ve asked for feedback from reflective of your design\u2019s actual audience? Are they looking at it the same way your potential users would? Does this reaction tell you anything specific about any of the design decisions you\u2019ve made so far or about their effectiveness? \n Direction \n You should have made all of those radio buttons a drop down [because...] \n Direction-based feedback typically begins with an instruction or suggestion. In many cases that\u2019s also where it ends. In this form of feedback, the individual providing it is often looking for ways to bring the creation more in line with their own expectations of what the solution should be. You might also have encountered examples of this kind of feedback that start with phrasing similar to: \"If I were to do this... or I would have... or I wish... \n In all of these, the individual giving the feedback is trying to communicate his or her own vision for the creation. It may be because they have their own detailed solution already in their mind, or it may be that they feel a problem they perceive is not adequately being solved. In some cases, the individual will go on to describe why they are making the suggestion, which can shed a bit more light on their thinking and motives. \n Why it can be an issue: Similar to reaction-based feedback, direction-based feedback without any explanation tells you nothing about the effectiveness of your decisions in meeting the design\u2019s objectives. Sure, if the person giving you feedback is the one who will ultimately approve the design, it might supply you with a to-do list that you could act upon to get their approval, but getting that approval and creating an effective design are not necessarily the same thing. \n In the situations where the individual also gives some explanation as to why they are making the suggestion, you at least begin to understand the impetus and perhaps the issue they\u2019re trying to address with it. But it still does not help you understand how or why the design you have is or is not effective at addressing that problem. \n Additionally, when left unchecked, this type of feedback leads to problem solving which, while an important part of the design process, is counterproductive to the conversation you\u2019re trying to have. It\u2019s not that the direction itself is a bad idea, but at this point, it\u2019s out of place. We\u2019ll talk more about problem solving and it\u2019s impact later on in Chapter 3. \n We\u2019ll talk more about how to deal with these forms of feedback in Chapters 4 and 5. For now what\u2019s most important is to understand what these forms lack in terms of their usefulness to us in helping us improve our creations. \n What we really need is critical thinking \n Critical thinking is the process of taking a statement and determining if it is true or false. When we\u2019re designing something, we\u2019re doing so to meet or achieve some set of objectives. When looking for feedback on our creations, what we should be working to understand is whether we think it\u2019s true or not that what has been created and the method in which it\u2019s been created will work to achieve those objectives. We\u2019re looking for a form of analysis to take place. \n And that\u2019s exactly what critique is. \n Critique: The third form of feedback \n If the objective is for users to seriously consider the impact to their bank balance before making a purchase, placing the balance at the bottom of the screen at the same size as all the other numbers isn\u2019t effective because it gets lost in all of the other information. \n It\u2019s this form of feedback that is most helpful to us in understanding the impact of our design decisions. Critique isn\u2019t about that instant reaction you might feel when seeing something, or about how you would change someone\u2019s creation to better solve an issue. \n Critique is a form of analysis that uses critical thinking to determine whether a creation is expected to achieve its desired outcomes (and adhere to any pertinent best practices/heuristics). Those outcomes can be any number of types of things. They can be about utility \u2014 for example, giving someone the ability to complete a task. They can be about metrics and measurement, as in increasing the number of conversions for a particular call to action. Or they can be experiential \u2014 for example, making someone feel excited or surprised by something. \n I once worked on a project for a financial services company whose goals for an update to their site\u2019s design included getting more visitors to spend time viewing their articles and commentary, and more specifically to increase the average number of articles and commentary pieces viewed by a user within a visit. But the primary goal was an increased completion rate for a short contact form that helped generate leads. With these objectives agreed upon by the team, we were able to focus our conversations on the aspects of the design ideas we came up with that we felt would or would not work to produce these results. \n Good critique is comprised of three key details: \n \n It identifies a specific aspect of the idea or a design decision in the creation being analyzed. \n It relates that aspect or decision to an objective or best practice. \n It describes how and why the aspect or decision work to support or not support the objective or best practice. \n \n We\u2019ll talk more later in Chapter 3 about the role of these objectives in design projects and in setting the foundation for productive conversations, but hopefully this begins to give you a sense of how critique differs from the very broad and reactionary basis of feedback. \n Knowing what we want and what we\u2019re asking for makes all the difference in how our conversations play out. It may seem like little more than semantics, and it\u2019s damn hard to let go of using the word \u201cfeedback\u201d when asking to talk with people about an idea or creation (hell, we\u2019ll be using it over and over again in this book). But as you\u2019ll see as you read the coming chapters, what\u2019s important is to understand the difference and to use that understanding to inform how you ask people and facilitate the resulting conversations. \n Cropped image on article and category pages by Patrick Hoesly on Flickr , used under a Creative Commons license . This post is part of our investigation into Experience Design and Business .", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/gohB7AU71jw/in-design-what-we-really-need-is-critical-thinking.html", 
  "title": "In design, what we really need is critical thinking"
 }, 
 {
  "content": "Exact Maximum Clique for Large or Massive Real Graphs -- explanation of how BBMCSP works. \n Giving Robots and Prostheses the Human Touch -- the team, led by mechanical engineer Veronica J. Santos, is constructing a language of touch that both a computer and a human can understand. The researchers are quantifying this with mechanical touch sensors that interact with objects of various shapes, sizes, and textures. Using an array of instrumentation, Santos\u2019 team is able to translate that interaction into data a computer can understand. The data is used to create a formula or algorithm that gives the computer the ability to identify patterns among the items it has in its library of experiences and something it has never felt before. This research will help the team develop artificial haptic intelligence, which is, essentially, giving robots, as well as prostheses, the \u201chuman touch.\u201d \n boltons -- things in Python that should have been builtins. \n Everything We Wish We'd Known About Building Data Products (DJ Patil and RusJan Belkin) -- Data is super messy, and data cleanup will always be literally 80% of the work. In other words, data is the problem. [...] \"If you're not thinking about how to keep your data clean from the very beginning, you're fucked. I guarantee it.\" [...] \u201cEvery single company I've worked at and talked to has the same problem without a single exception so far \u2014 poor data quality, especially tracking data,\u201d he says.\u201cEither there's incomplete data, missing tracking data, duplicative tracking data.\u201d To solve this problem, you must invest a ton of time and energy monitoring data quality. You need to monitor and alert as carefully as you monitor site SLAs. You need to treat data quality bugs as more than a first priority. Don\u2019t be afraid to fail a deploy if you detect data quality issues.", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/jyoXXODKmnE/four-short-links-10-april-2015.html", 
  "title": "Four short links: 10 April 2015"
 }, 
 {
  "content": "Web projects are integration projects, combining skills from a number of disciplines. Lousy interfaces can obscure brilliant code, and ingeniously engineered back-end systems can still fail when they hit resource limits. \u201cContent\u201d lurks in many guises, requiring support not only from writers and illustrators but from video specialists, game designers, and many more. Marketers have built businesses on the Web, and influence conversations from design to analytics. You don't have to be a programmer to do great work on the Web. The Web stack is vast . \n Web development models include far more than code. Creating great websites and applications demands collaboration among content creators, designers, and programmers. As applications grow larger, supporting them requires adding a cast of people who can help them scale to demand. As projects grow, specialization typically lets people focus on specific aspects of those larger disciplines, supporting networking, databases, template systems, graphics details, and much more. \n In some ways, that's a recipe for fragmentation, and some days the edges are sharp. All of these communities have different priorities, which conflict regularly. Battles over resources sharpen the axes, and memories often linger. \n At the same time, though, often even in environments where resources are scarce, different perspectives can reinforce each other or create new possibilities. Sometimes, it's just because the intersection spaces have been left fallow for a long time, but other times, the combinations themselves create new opportunities. \n I've written before about the possibilities of applying design values in programming contexts , but a concrete example keeps gaining traction lately: hypermedia. It's an old term, going back to Ted Nelson's many efforts to mix computing into other disciplines, but it took off in the '90s to describe a wide variety of hypertext and multimedia projects, including the World Wide Web. As the Web came to seem less exotic, the word faded. Hypermedia has picked up a new charge, though, for computer-to-computer communications. Many of the same ideas that work for human-to-human exchange and exploration work for computers , and terms developed for human experience apply to APIs. \n Even though Web developers frequently enjoy contrasting their practical approaches with the \"ivory tower\" of academia, the Web is capable of absorbing lessons from doctoral dissertations. Roy Fielding's 2000 UC Irvine dissertation, \" Architectural Styles and \nthe Design of Network-based Software Architectures \" sounds pretty abstract, but the chapter on \"Representational State Transfer (REST)\" might sound familiar. Of course, it probably also helps that Fielding co-founded the Apache HTTP Server project and was an active participant in various software and standards processes, but a lot of people found REST through that chapter. \n Some crossovers are made easier by similarities in roles. I've enjoyed listening to software architects and experience designers sharing war stories over a meal, finding that the challenges of human interaction while creating industrial-scale projects are, well, disturbingly similar. Both roles require coordinating groups of people who have their own priorities, trying to get them to agree on core values and structures. The structures look very different on the surface, but there are often similarities. \n Creating great websites and applications demands collaboration among content creators, designers, and programmers. \n I always like to go to \"Git for Designers\" talks. Git began as the epitome of a programmer's tool, initiated by Linus Torvalds over a weekend (a few months to completion) to manage the source code for Linux. Pull requests? Branches? Diffs? Cryptographic history authentication? Delta compression? As it turns out, distributed development isn't just a programming problem. Sympathetically told, git's story fits the needs of many kinds of Web developers. GitHub put git on the Web and added social features, and today you can even use git to manage blog content . \n As much as similarities can drive collaborations, though, differences and collisions can drive critical conversations. \n Accessibility is contentious. Tearing down barriers often gets in the way of people who didn't realize they were building barriers as they built something they thought looked cool. Accessibility folks rarely set out to be specialists in Web architecture, in the details of browsers, or in programmer education. However, accessibility specialists have had to face and call out more bad and good practice than almost anyone else out there. They work with more tools and among more details than most developers, and while their work is primarily on the front end, it also requires an understanding of interaction with the back end. Many accessibility folks work as consultants, giving them an outsider status that makes it easier to acknowledge what's broken. If you need a good filter for what's best for the Web and its users, ask an accessibility specialist. \n Another key filter that often works through collision is the group of programmers who actually write the many browsers we all use. In the early days of the Web, browsers were small, and there were many, but it still took a lot of programming effort to build one. By the time Netscape released what became the open source code base of Mozilla in 1998, the Web was complicated and the skill sets were very different. People asked whether enough Web people cared about C++ (or vice versa) to sustain such a project. Today, it's clear there are enough people willing to see Web technologies from a programmer's eye to ensure that these projects can continue to flourish. Some days the programmers wisely tell us that it's not yet time for processing-, memory-, or bandwidth-intensive features. \n Of course, these two groups and many others don't always agree, but that's much of why I'm glad the World Wide Web Consortium ( W3C ) deliberately tries to include many different kinds of voices in its membership and experts. \n One last group, often unheralded, is key to the Web's cross-pollination: a constant flow of beginners. For many people, the Web is their first stop in creating content, applications, and sites. They bring experience from everywhere. That constant flow means that we have to take each other's crazy ideas a little more seriously than fields limited to experts. In the long run, that openness \u2014 and especially that welcoming \u2014 is what keeps the Web diverse. \n Have your own stories about the success (or failure) of cross-pollination? Let us know in the comments or through Twitter ( @simonstl )! \n Photo by Berit Watkin on Flickr. Used under a Creative Commons License . This post is part of our ongoing exploration into cross-pollinating communities in the Web space .", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/izWNb-MOK3w/cross-pollinating-web-communities.html", 
  "title": "Cross-pollinating Web communities"
 }, 
 {
  "content": "Twenty years ago, open source was a cause. Ten years ago, it was the underdog. Today, it sits upon the Iron Throne ruling all it surveys. Software engineers now use open source frameworks, languages, and tools in almost all projects. \n When I was putting together the program for OSCON with the other program chairs , it occurred to me that by covering \"just\" open source, we weren't really leaving out all that much of the software landscape. It seems open source has indeed won, but let's not gloat; let's make things even better. Open source has made many great changes to software possible, but the spirit of the founding community goes well beyond code. \n Pieces of a larger puzzle: Languages, libraries, and frameworks \n Open source languages such as Java, Python, and Ruby benefit from communities that not only report problems, but add to the efficacy and optimization of a language. New libraries and frameworks augment these and other open source languages by giving software engineers tools to solve problems quickly. However, languages with their libraries and frameworks are but the tools to get things done. \n In the past, we've organized OSCON's tracks by language. This reflected a time when software engineers tended to stick to one language or another. This was before the days of 782 JavaScript frameworks and several different languages, database choices, and architectures that are optimized for different types of projects. Well, no more! \n This year, you'll see that we've set the tracks so they reflect what you, the software engineer, need to get things done. \n \n Protect \u2014 Identity, privacy, and security are emerging and nuanced facets in the digital age, and now they're also an exciting cross-functional track at OSCON 2015. \n Scale \u2014 From compilation and interpreter time to DOM manipulation, browser responsiveness, and network latency, we'll explore scale and performance in all their aspects. \n Mobility \u2014 We'll look at what it means to have a successful mobile game plan, from wearables to native apps. \n Collaboration \u2014 Making projects work requires communication, collaboration, and respect. We'll look at the ways a new generation of tools and approaches can help you work. \n Craft \u2014 You need to work on you! We'll present ideas on how to fail fast, say \u201cno,\u201d overcome impostor syndrome, and integrate your work into the open source community. \n Architecture \u2014 Software architecture is a massive multidisciplinary subject, covering many roles and responsibilities \u2014 and it's a key position in the success of any business. \n Design \u2014 It's critical for success; learn how to incorporate design best practices from the beginning of your project and all the way through. \n Data \u2014 We'll tackle data's continued, growing influence over the entire business world and present ways you can make it work for you. \n Foundations \u2014 A strong foundation in computational thinking, problem solving, and programming best practices makes for a successful programmer. \n Solve \u2014 Harness the power of math to manipulate, secure, and create data. \n \n Over the next few weeks, look for posts that go into more depth about each of these tracks. \n An evolved software community \n As I mentioned in my recent post \" Software engineers must continuously learn and integrate ,\" organizations need to integrate open source code and open source culture if they want to move at a speed that will drive success. This year, we'll focus on company culture via Cultivate , a two-day event at OSCON. We'll discuss the values and practices that enable organizations to respond with agility to changes in their products and their customers. If you need to learn about growing teams within your organization, instilling leadership skills that are necessary for success now and in the future, and creating processes that work for rather than against you, you need to be at Cultivate . \n OSCON, reimagined \n OSCON touches upon all aspects of the software industry and what we cover at O'Reilly. It's been at the heart of what we do for almost 18 years. But going forward, we want to make sure we continue to meet the needs of our community while advancing the open source message. That's why we're taking a new approach with the event's structure. \n Whether you're attending OSCON for the first time or you've been to this conference many times before, you're already a part of this thriving community. We look forward to showing you what we have in store as OSCON is expanded and reimagined. \n Learn more about the OSCON 2015 program .", 
  "link": "http://feedproxy.google.com/~r/oreilly/radar/atom/~3/1xC5Uvy4meQ/open-source-won-so-whats-next.html", 
  "title": "Open source won, so what&#8217;s next?"
 }
]